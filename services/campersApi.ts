import { api } from './api';
import { Camper, FilterParams } from '@/types/campers';

interface ApiResponse {
  total: number;
  items: Camper[];
}

export const campersApi = {
  getCampers: async (params: FilterParams = {}): Promise<Camper[]> => {
    const { page = 1, limit = 4, ...filters } = params;

    // –°–æ–∑–¥–∞–µ–º query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è API
    const queryParams: any = {
      page,
      limit,
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (filters.location && filters.location.trim() !== '') {
      queryParams.location = filters.location;
    }

    if (filters.form && filters.form.trim() !== '') {
      queryParams.form = filters.form;
    }

    // –î–ª—è boolean —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
    if (filters.AC) queryParams.AC = 'true';
    if (filters.kitchen) queryParams.kitchen = 'true';
    if (filters.TV) queryParams.TV = 'true';
    if (filters.bathroom) queryParams.bathroom = 'true';
    
    if (filters.transmission && filters.transmission.trim() !== '') {
      queryParams.transmission = filters.transmission;
    }

    console.log('üîÑ Fetching campers from API with params:', queryParams);

    try {
      const response = await api.get<ApiResponse>('/campers', { 
        params: queryParams 
      });
      
      // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏ total –∏ items
      const apiData = response.data;
      const campersData = apiData?.items || [];
      
      console.log(`‚úÖ Received ${campersData.length} campers for page ${page}, total: ${apiData?.total || 0}`);
      
      return campersData;
    } catch (error: any) {
      console.error('‚ùå Error fetching campers from API:', {
        status: error.response?.status,
        message: error.message,
        url: error.config?.url
      });
      
      // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback - –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é
      try {
        console.log('üîÑ Trying direct fetch as fallback...');
        const directResponse = await fetch(`https://66b1f8e71ca8ad33d4f5f63e.mockapi.io/campers?page=${page}&limit=${limit}`);
        if (directResponse.ok) {
          const data = await directResponse.json();
          console.log(`‚úÖ Fallback successful: received ${data.items?.length || 0} campers`);
          return data.items || data || [];
        }
      } catch (fallbackError) {
        console.error('‚ùå Fallback also failed:', fallbackError);
      }
      
      return [];
    }
  },

  getCamperById: async (id: string): Promise<Camper> => {
    try {
      const response = await api.get<Camper>(`/campers/${id}`);
      return response.data;
    } catch (error: any) {
      console.error(`Error fetching camper ${id}:`, error);
      
      // Fallback –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –∫–µ–º–ø–µ—Ä–∞
      try {
        const directResponse = await fetch(`https://66b1f8e71ca8ad33d4f5f63e.mockapi.io/campers/${id}`);
        if (directResponse.ok) {
          return await directResponse.json();
        }
      } catch (fallbackError) {
        console.error('Fallback for camper details failed:', fallbackError);
      }
      
      throw error;
    }
  },
};